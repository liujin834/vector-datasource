CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse(
       planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_landuse_(
{%- for param in landuse_params %}
        row.{{param}},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_landuse_(
{%- for param in landuse_params %}
        row.{{param}},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse_(
{%- for param in landuse_params %}
        {{param}} text,
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS REAL AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ landuse_level }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_landuse_kind(
       planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_landuse_kind_(
{%- for param in landuse_params %}
        row.{{param}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_landuse_kind(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_landuse_kind_(
{%- for param in landuse_params %}
        row.{{param}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_landuse_kind_(
{%- for param in landuse_params %}
        {{param}} text,
{%- endfor %}
        tags hstore)
RETURNS TEXT AS $$
BEGIN
  RETURN {{ landuse_kind }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;
